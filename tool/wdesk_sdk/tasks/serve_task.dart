// This file is generated by the Wdesk SDK. Please see the README for more information.
import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:args/args.dart';
import 'package:pub_semver/pub_semver.dart';

/// Any request hostname that should be redirected to localhost. This prevents
/// having to add localhost aliases as allowed origins with the IAM_HOST.
const Iterable<Pattern> localHostAliases = ['0.0.0.0'];

String pubServeHost;

Future<Null> main(List<String> arguments) async {
  final parser = ArgParser()
    ..addFlag('help', abbr: 'h', help: 'Print help.', negatable: false);

  final webdevProxyVersion = _getGlobalVersion('webdev_proxy');
  const webdevProxyValidVersion = '^0.1.0';
  const commandInformation =
      'Running `pub global activate webdev_proxy \'$webdevProxyValidVersion\'`...';
  if (webdevProxyVersion == null) {
    print('webdev_proxy is not installed. $commandInformation');
    _globallyInstallWebdevProxy(webdevProxyValidVersion);
  } else {
    if (!VersionConstraint.parse(webdevProxyValidVersion)
        .allows(webdevProxyVersion)) {
      print(
          'Your version of webdev_proxy ($webdevProxyVersion) is incompatible with the serve task. $commandInformation');
      _globallyInstallWebdevProxy(webdevProxyValidVersion);
    }
  }

  final parsedArgs = parser.parse(arguments);

  if (parsedArgs['help']) {
    print('Tooling for running Wdesk SDK applications locally.\n');
    print(parser.usage);
    print('\n'
        'You may use any of the options supported by `webdev_proxy serve` by '
        'passing them after the `--` separator. '
        'Run `webdev_proxy serve --help` to see these options');
    exit(0);
  }

  final args = ['serve'];

  // Automatically add --delete-conflicting-outputs to the serve script,
  // The wdesk_sdk_builders' builder outputs some assets that were committed
  // under Dart 1, so we should delete them by default on Dart 2.
  //
  // This task wraps `webdev_proxy`, which wraps `webdev`, which wraps `build_runner`.
  // The `--delete-conflicting-outputs` flag is a `build_runner` flag, so it
  // will be nested in the deepest arg separator (2 deep on webdev_proxy).
  final argsSeparators = ['--', '--'];
  List<String> remainingArgs = List.from(parsedArgs.rest);
  while (remainingArgs.contains('--')) {
    args.addAll(remainingArgs.take(remainingArgs.indexOf('--')));
    remainingArgs.removeRange(0, remainingArgs.indexOf('--') + 1);
    args.add(argsSeparators.removeAt(0));
  }
  args.addAll(remainingArgs);

  if (!remainingArgs.contains('--delete-conflicting-outputs')) {
    args.addAll(argsSeparators);
    args.addAll(['--delete-conflicting-outputs']);
  }

  // Use `pub global run` syntax so we're not relying on the user's PATH.
  args.insertAll(0, ['global', 'run', 'webdev_proxy']);
  print('Starting `pub ${args.join(' ')}`...');

  // Start pub serve
  final pubServe = await Process.start('pub', args);
  Completer c = Completer();
  pubServe.stdout
      .transform(utf8.decoder)
      .transform(const LineSplitter())
      .listen((line) {
    // The output we get does not have ANSI color codes, because dart:io stdioType
    // is correctly determining that we are not a terminal.
    // There is no way to override this that I can tell.
    // FUTURE - we could mimic the color formatting that pub server has in
    // https://github.com/dart-lang/pub/blob/master/lib/src/command/serve.dart#L148
    // Provide pub serve output to the console
    print(line);
    final buildFinishLine = '[INFO] Succeeded after';
    if (line.startsWith(buildFinishLine) && !c.isCompleted) {
      c.complete();
    }
  });
  pubServe.stderr
      .transform(utf8.decoder)
      .transform(const LineSplitter())
      .listen((line) {
    print(line);
  });

  pubServe.exitCode.then((_) => c.complete());
}

/// Returns the version of the package with [packageName] that is globally
/// activated, or `null` if it is not activated.
Version _getGlobalVersion(String packageName) {
  final globalVersions = Process.runSync(
    'pub',
    ['global', 'list'],
    stdoutEncoding: utf8,
  );
  final pkgPattern = RegExp('^$packageName ([${r'\w\.\+\-'}]+)');
  for (final line in globalVersions.stdout.toString().split('\n')) {
    final match = pkgPattern.firstMatch(line);
    if (match != null) {
      return Version.parse(match.group(1));
    }
  }
  return null;
}

void _globallyInstallWebdevProxy(String version) {
  final activateWebdevProxyResult = Process.runSync(
    'pub',
    ['global', 'activate', 'webdev_proxy', version],
    stdoutEncoding: utf8,
  );
  print(activateWebdevProxyResult.stdout);
  if (activateWebdevProxyResult.exitCode != 0) {
    print(activateWebdevProxyResult.stderr);
    exit(activateWebdevProxyResult.exitCode);
  }
}
