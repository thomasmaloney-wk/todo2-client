import 'dart:io';

import 'package:args/args.dart';
import 'package:dart_dev/dart_dev.dart';

class GenTestRunner extends DevTool {
  @override
  final ArgParser argParser = ArgParser()
    ..addSeparator('======= Generated Runner Options')
    ..addOption(
      'file',
      abbr: 'f',
      help: 'A substring of the unit test file or files to be run.',
    )
    ..addFlag('check',
        abbr: 'c',
        negatable: false,
        help: 'Check if changes need to be made to the generated runner file '
            'and sets the exit code.');
  //var results = argParser.parse(args);

  @override
  int run([DevToolExecutionContext context]) {
    context ??= DevToolExecutionContext();

    final configs = [
      TestRunnerConfig(
          directory: 'test/unit',
          env: Environment.browser,
          genHtml: true,
          check: context.argResults.wasParsed('check'),
          //fileFilter: context.argResults['file'] ?? defaultFileFilter,
          filename: 'generated_runner_test',
          dartHeaders: [
            //"// ignore_for_file: directives_ordering",
            //"import 'package:react/react_client.dart' as react_client;",
            "import 'package:web_skin/web_skin.dart';", // as ui_core;",
            "import 'package:platform_detect/decorator.dart';",
            "import 'package:web_skin_dart/ui_core.dart';"
            //"import 'package:over_react/over_react.dart' as over_react;",
          ],
          preTestCommands: [
            //"over_react.ValidationUtil.WARNINGS_ENABLED = false;", // We don't need to see these in unit tests
            "decorateRootNodeWithPlatformClasses(features: getWebSkinFeatures());",
            "setClientConfiguration();",
            "enableTestMode();",
            //"ui_core.enableTestMode();",
          ],
          htmlHeaders: [
            '<script src="packages/react/react_with_addons.js"></script>',
            '<script src="packages/react/react_dom.js"></script>',
            //'<script src="packages/web_skin/dist/js/core/modernizr/modernizr-custom.js"></script>',
            '<link rel="stylesheet" href="packages/web_skin/dist/css/web-skin.min.css">',
          ]),
    ];

    for (final config in configs) {
      generate(config);
      if (exitCode != 0) {
        return exitCode;
      }
    }
    return exitCode;
  }
}

void generate(TestRunnerConfig config) {
  final generatedRunner = File(config.path);

  String currentContents;
  if (config.check) {
    try {
      currentContents = generatedRunner.readAsStringSync();
    } catch (_) {
      currentContents = '';
    }
  }

  final output = StringBuffer();
  final testDirectory = Directory(config.directory);
  //final applyFileFilter = config.fileFilter.isNotEmpty;
  final testFiles = (testDirectory
      .listSync(recursive: true, followLinks: false)
      .whereType<File>()
      .where((file) => file.path.endsWith('_test.dart'))
      .where((file) => !file.path.endsWith('${config.filename}.dart'))
      //.where(
      //    (file) => !applyFileFilter || file.path.contains(config.fileFilter))
      .toList())
    ..sort((left, right) => left.path.compareTo(right.path));

  if (config.genHtml && !config.check) {
    testHtmlFileGenerator(
        config.directory, config.filename, config.htmlHeaders);
  }

  if (config.env == Environment.browser) {
    output.writeln('@TestOn(\'browser\')');
  } else if (config.env == Environment.vm) {
    output.writeln('@TestOn(\'vm\')');
  } else {
    output.writeln('@TestOn(\'browser || vm\')');
  }
  output
    ..writeln(
        'library ${config.normalizedDirectory.replaceAll('/', '.')}${config.filename};')
    ..writeln()
    ..writeln('// Generated by the `pub run dart_dev test` command')
    ..writeln();

  for (final file in testFiles) {
    var testPath = file.path.replaceFirst(config.normalizedDirectory, '');
    output.writeln(
        "import './$testPath' as ${testPath.replaceAll('/', '_').substring(0, testPath.length - 5)};");
  }

  output.writeln("import 'package:test/test.dart';");

  if (config.dartHeaders.isNotEmpty) {
    config.dartHeaders.forEach(output.writeln);
  }

  output..writeln()..writeln('void main() {');

  if (config.preTestCommands.isNotEmpty) {
    config.preTestCommands.map((cmd) => '  $cmd').forEach(output.writeln);
  }

  testFiles
      .map((file) => file.path.replaceFirst(config.normalizedDirectory, ''))
      .map((testPath) =>
          '  ${testPath.replaceAll('/', '_').substring(0, testPath.length - 5)}.main();')
      .forEach(output.writeln);

  output.writeln('}');
  final updatedContents = output.toString();

  if (config.check && updatedContents != currentContents) {
    print('Generated test runner needs to be updated.');
    exitCode = 1;
  }

  generatedRunner.writeAsStringSync(updatedContents);
  print('Unit test runner file generation successful.');
}

void testHtmlFileGenerator(
    String directory, String filename, List<String> htmlHeaders) {
  final buffer = StringBuffer()..write('''
<!DOCTYPE html>
<html>
  <head>
    <title>$filename</title>
''');
  htmlHeaders.map((header) => '    $header').forEach(buffer.writeln);
  buffer.write('''
    <link rel="x-dart-test"  href="$filename.dart">
    <script src="packages/test/dart.js"></script>
  </head>
  <body></body>
</html>
''');
  File('$directory/$filename.html').writeAsStringSync(buffer.toString());
}

const bool defaultCheck = false;
const List<String> defaultDartHeaders = [];
const List<String> defaultPreTestCommands = [];
const String defaultDirectory = 'test/';
const Environment defaultEnv = Environment.browser;
const String defaultFilename = 'generated_runner';
const String defaultFileFilter = '';
const bool defaultGenHtml = true;
const bool defaultReact = true;
const List<String> defaultHtmlHeaders = [];

enum Environment { vm, browser, both }

class TestRunnerConfig {
  final bool check;
  final List<String> dartHeaders;
  final List<String> preTestCommands;
  final String directory;

  String get normalizedDirectory =>
      directory + (!directory.endsWith('/') ? '/' : '');
  final Environment env;
  final String filename;
  //final String fileFilter;
  final bool genHtml;
  final List<String> htmlHeaders;

  String get path => '$normalizedDirectory$filename.dart';

  TestRunnerConfig({
    this.dartHeaders = defaultDartHeaders,
    this.preTestCommands = defaultPreTestCommands,
    this.directory = defaultDirectory,
    this.env = defaultEnv,
    this.filename = defaultFilename,
    //this.fileFilter = defaultFileFilter,
    this.genHtml = defaultGenHtml,
    this.htmlHeaders = defaultHtmlHeaders,
    this.check = defaultCheck,
  });
}
