// This file is generated by the Wdesk SDK. Please see the README for more information.
var cacheKey = self.cacheKey;

var cdnBaseUrl = '{codegen:cdn_base_uri}';
var urlsToCache = [
    //{codegen:uris_to_cache}
];

self.addEventListener('install', function(event) {
  if (!cacheKey) {
    throw new Error('Asset Caching SW failed to install: missing cache key.');
  }

  event.waitUntil(
    caches.open(cacheKey).then(function(cache) {
      // Install won't fail if these resources aren't cached.
      cache.addAll(urlsToCache.map(function(url) {
        // TODO: See comment below about cross-origin no cors requests being
        // cached. This probably applies here as well.
        return new Request(url, {
          mode: 'no-cors'
        });
      }));
      // Install will fail if new index.html doesn't cache.
      return cache.add('./');
    })
  );
});

self.addEventListener('fetch', function(event) {
  var host = location.toString().replace('sw.js', '');
  var isCdnAsset = event.request.url.indexOf(cdnBaseUrl) === 0;
  var isIndex = event.request.url === host || event.request.url === host + 'index.html';
  if (!isCdnAsset && !isIndex) return;

  event.respondWith(
    caches.match(event.request).then(function(response) {
      if (response) {
        return response;
      }

      // Requests are streams and can only be consumed once. We will be
      // consuming the request once for the cache and once for the
      // fetch, so we need to clone it.
      var fetchRequest = event.request.clone();

      // TODO: If the request is cross-origin, it will be sent in "no-cors" mode
      // in order to disable the browser's CORS checks. Consequently, the
      // response will be "opaque" leaving us no way to know if it succeeded.
      // In this scenario, the asset will not be cached.
      //
      // Possible solution is to use cache.add() instead of trying to cache
      // the response that we already have. This would require an extra request,
      // but would allow the browser to determine whether or not to cache the
      // response based on the response status.

      return fetch(fetchRequest).then(function(response) {
        if (!response || !response.ok) {
          return response;
        }

        // Clone the response since we will be consuming it twice as well.
        var responseToCache = response.clone();

        // Cache any uncached CDN resources as they are requested.
        caches.open(cacheKey).then(function(cache) {
          cache.put(event.request, responseToCache);
        });
        return response;
      });
    })
  );
});
