// This file is generated by the Wdesk SDK. Please see the README for more information.
if (!window.workiva) {
  window.workiva = {};
}
if (!window.workiva.w_session) {
  window.workiva.w_session = {};
}

if ('serviceWorker' in navigator && 'addEventListener' in navigator.serviceWorker) {
  var serviceWorkerRegistration;

  // Set a flag for the w_session lib so it knows to optimize for SW.
  window.workiva.w_session.serviceWorkerEnabled = true;

  // Listen for and store postMessages from the SW.
  window.workiva.w_session.messages = [];
  navigator.serviceWorker.addEventListener('message', function(event) {
    window.workiva.w_session.messages.push(event.data);
  });

  // register service worker
  navigator.serviceWorker.register('/service_worker.js').then(function(registration) {
    registration.onupdatefound = function() {
      var installingWorker = registration.installing;
      installingWorker.onstatechange = function() {
        switch (installingWorker.state) {
          case 'installed':
            // lib/src/wdesk_app.dart injects this function into js context.
            if (typeof displayNewVersionAvailableAlert !== 'undefined') {
              displayNewVersionAvailableAlert();
            } else {
              console.warn('Could not find `displayNewVersionAvailableAlert()` function.');
            }
            break;
          case 'redundant':
            console.warn('The installing service worker became redundant.');
            break;
        }
      };
    };
    serviceWorkerRegistration = registration;
  }).catch(function(err) {
    // registration failed :(
    console.error('ServiceWorker registration failed: ', err);
  });

  // attempt to update service worker periodically
  var secondsBetweenUpdates = 60 * 60;
  var time = new Date();
  var secondsRemaining = (secondsBetweenUpdates - time.getSeconds()) * 1000;
  setTimeout(function() {
    setInterval(function() {
      serviceWorkerRegistration.update();
    }, secondsBetweenUpdates * 1000);
  }, secondsRemaining);
}
