worker_processes 1;
daemon off;
pid /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	server_tokens off;

	add_header X-Frame-Options SAMEORIGIN;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";
	add_header Content-Security-Policy "default-src 'self' 'unsafe-eval' *.wdesk.com *.wdesk.net *.wdesk.org *.workiva.org *.webfilings.com *.webfilings.org *.appspot.com *.google-analytics.com wss://*.wdesk.org wss://*.wdesk.com; style-src 'self' 'unsafe-inline' *.wdesk.com *.wdesk.net *.wdesk.org *.workiva.org *.webfilings.com *.webfilings.org *.appspot.com *.google-analytics.com";

	gzip on;
	gzip_disable "msie6";
	gzip_types application/javascript application/x-javascript text/css image/svg+xml;

    server {
        listen  8080;
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        error_log stderr error;
        rewrite_log on;

        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

        location / {
            # Attempt any given URI and serve index if it is not available. This
            # removes the need for segment routing.
            try_files $uri $uri/ /;
            add_header Cache-Control "max-age=0, no-cache, no-store, must-revalidate";
            add_header Expires 0;
            add_header Pragma no-cache;
            add_header Content-Security-Policy "$csp";
            add_header Strict-Transport-Security "$sts";
            # Disable content sniffing.
            add_header X-Content-Type-Options nosniff;
            # Instruct the browser not to render the page inside an frame or iframe to
            # avoid clickjacking.
            add_header X-Frame-Options SAMEORIGIN;
            # Forces XSS protection. This should be the default - but it may have been
            # disabled by the user. mode=block will prevent rendering of pages if a
            # potential XSS reflection, instead of sanitizing.
            add_header X-XSS-Protection "1; mode=block";
        }

        location = / {
            try_files /$static_asset_prefix/index.html /index.html;
            add_header Cache-Control "max-age=0, no-cache, no-store, must-revalidate";
            add_header Expires 0;
            add_header Pragma no-cache;
            add_header Content-Security-Policy "$csp";
            add_header Strict-Transport-Security "$sts";
            # Disable content sniffing.
            add_header X-Content-Type-Options nosniff;
            # Instruct the browser not to render the page inside an frame or iframe to
            # avoid clickjacking.
            add_header X-Frame-Options SAMEORIGIN;
            # Forces XSS protection. This should be the default - but it may have been
            # disabled by the user. mode=block will prevent rendering of pages if a
            # potential XSS reflection, instead of sanitizing.
            add_header X-XSS-Protection "1; mode=block";
        }
        # location / {
        #     root /support_tool_dart/build/web;
        # }

        # location /s/support-viewer {
        #     rewrite ^/s/support-viewer/(.*)$ /$1;
        #     root /support_tool_dart/build/web;
        # }

        # location /s/support-viewer/oauth2_redirect {
        #     default_type text/plain;
        #     return 200;
        # }

        # location /oauth2_redirect {
        #     default_type text/plain;
        #     return 200;
        # }

    }

    # Health check configuration for use by devops tools.
    server {
        listen 8081;

        location = /health {
            return 200 '{"status": "all is well"}';
            add_header Content-Type application/json;
        }

        error_log stderr error;
    }
}